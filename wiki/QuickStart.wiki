= Quick start =
== Integrating SharpKit to an existing project ==
        * Download the setup file, and install.
        * Add the following line on your .csproj file: (add it right after all 'Import' sections in your project file)
    {{{<Import Project="$(MSBuildBinPath)\SharpKit\4\SharpKit.Build.targets" />}}}
    
* Add the following files into your project:
        * javascript-1.6.cs
        * html-4.01.cs
    These files are located on your computer at:
    {{{"C:\Program Files (x86)\SharpKit\4\Libraries"}}}
    or in 32 bit operating systems at:
    {{{"C:\Program Files\SharpKit\4\Libraries"}}} 
* Create a new class and add the following code:
    
{{{
[JsType(JsMode.Global, Filename="Site.js")]
	class Site : HtmlContext
	{
	public static void btn_click(HtmlDomEventArgs e)
	{
			document.body.appendChild(document.createTextNode("Hello SharpKit!"));
	}
}
}}}
The {{{JsType}}} attribute will cause SharpKit to convert the class Site into the file Site.js
* Create an .html or .aspx file, and include the Site.js file
    
{{{
<html>
<head>
    <script src="Site.js"></script>
</head>
<body>
    <button onclick="btn_click(event)">Click me</button>
</body>
</html>
}}}
== Creating an ASP.NET web application with SharpKit: ==
Use the supplied templates located in Visual Studio, under C# -> SharpKit.
== Integrating SharpKit into an existing project: ==
edit your .csproj file and add this line:
{{{<Import Project="$(MSBuildBinPath)\SharpKit\4\SharpKit.Build.targets" />}}}
This line should be added right after all other {{{<import>}}} tags.
== Upgrading a project from SharpKit v2 to SharpKit v4: ==
Edit your .csproj file, replace this line:
{{{<Import Project="$(MSBuildBinPath)\SharpKit\SharpKit.Build.targets" />}}}
With this line:
{{{<Import Project="$(MSBuildBinPath)\SharpKit\4\SharpKit.Build.targets" />}}}

= Using SharpKit =
To convert a class into JavaScript, all you have to do is to decorate your class with a {{{JsType}}} attribute. There are several modes in which SharpKit can convert C# to JavaScript, by setting the {{{JsMode}}} parameter on the {{{JsType}}} attribute. 
== Global Mode ==

A class decorated with a JsType(JsMode.Global) attribute will be converted in the following rules:
    * Static methods are converted to global functions (named functions)
    * Static fields are converted to global variables
    * Static constructor is converted to global code
{{{
[JsType(JsMode.Global, Filename="Global.js")]
class Global
{
	static JsNumber MyNumber = 0;
	static Global()
	{
		HelloWorld();
	}
	public static void HelloWorld()
	{
	}
	}
}}}
{{{
var MyNumber = 0;
HelloWorld();
function HelloWorld()
{
document.body.appendChild(document.createTextNode("Hello SharpKit!"));
}
}}}
    
Although it seems that the C# and JavaScript code is similiar, notice that it's fully typed. Write this code in a visual studio project, and hover with your mouse over the token 'document' or 'createTextNode' and see the documentation. Any attempt to modify the code to an unexisting method for example, will result in compilation error.

== Prototype Mode  ==

A class decorated with a JsType(JsMode.Prototype) attribute will be converted in the following rules:
* Constructor is converted into a JavaScript constructor function
* Instance methods are converted into prototype functions
* Static methods are converted into functions on the constructor function
    
{{{
[JsType(JsMode.Prototype)]
class Contact
{
	public void Call()
	{
	}
	public static Contact Load()
	{
			return null;
	}
}
}}}
{{{
Contact = function()
{
}
Contact.prototype.Call = function()
{
}
Contact.Load = function()
{
return null;
}
}}}
    

== Primitive types ==

Every JavaScript primitive type has an equivalent C# type, with a "Js" prefix, to avoid ambiguity with native C# types. 
JsObject
JsArray
JsString
JsNumber
JsDate
== Keywords ==
@this
@typeof
@return
instanceof (not implemented)
== Special C# methods for JavaScript ==
The {{{As<T>()}}} construct
== JavaScript functions vs. C# delegates ==
== Using the HTML DOM ==
== Using external libraries (jQuery, Sencha, etc...) ==
== Mobile development ==
== .NET Classes (Clr mode) ==
== Converting JavaScript code to C# ==